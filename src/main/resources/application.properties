# App Configurations
metar.path=/metarV1/
server.port=11010
server.servlet.context-path=/metarV1
# Logging
logging.file.name=${metar.path}metar.log
logging.level.com.ee.=INFO
logging.level.org.=ERROR
logging.level.com.zaxxer.=ERROR
#Database Configuration
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.h2.console.enabled=true
spring.datasource.initialization-mode=always
spring.jpa.show-sql=false
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.hibernate.naming-strategy=org.hibernate.cfg.ImprovedNamingStrategy
spring.jpa.properties.hibernate.jdbc.batch_size=200
# DateFormat
ZONE=Europe/Frankfurt
# Static Locations
spring.web.resources.static-locations=classpath:/resources/,file:/${metar.path}
# Actuator
management.endpoint.health.show-details=always
management.endpoints.web.exposure.include=*
management.endpoints.web.exposure.exclude=
# Environment
spring.application.name=metar
spring.pid.file=${metar.path}metar.pid
spring.main.web-application-type=servlet
# Documentation
spring.mvc.pathmatch.matching-strategy=ant-path-matcher
# Metar Configurations
station.metar.data.url=https://tgftp.nws.noaa.gov/data/observations/metar/stations/
station.metar.data.refresh.interval=300000
metar.data.refresh.interval=60000
metar.data.refresh.threadCount=10
metar.data.refresh.timeout=10
# Compression
server.compression.enabled=true
server.compression.mime-types=application/json,application/xml,text/html,text/xml,text/plain,application/javascript,text/css
server.compression.min-response-size=10240
spring.mvc.async.request-timeout=-1
sonar.projectName=${JOB_NAME}
sonar.projectVersion=1.0.0
sonar.sources=src/main
sonar.sourceEncoding=UTF-8
sonar.language=java
sonar.tests=src/test/java/com/example/airportservice
#sonar.junit.reportsPath=target/surefire-reports
sonar.surefire.reportPaths=target/surefire-reports
sonar.jacoco.reportPath=target/jacoco.exec
sonar.binaries=target/classes
sonar.java.coveragePlugin=jacoco
sonar.verbose=true